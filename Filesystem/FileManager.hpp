#ifndef TESTPROJECT_FILEMANAGER_HPP
#define TESTPROJECT_FILEMANAGER_HPP

#include <dirent.h>
#include <fcntl.h>
#include <unistd.h>
#include <algorithm>
#include <filesystem>

#include "../Utils/StringManipulations.hpp"

class FileManager
{
    int _fd;

public:
    FileManager()
    {
    }

    ~FileManager()
    {
        if(_fd != -1)
        {
            close(_fd);
            _fd = -1;
        }
    }

    static std::vector<pid_t> listDirEntrysDigits(const char* path) // to list /proc dir for pids
    {
        if(!std::filesystem::exists(path) || !std::filesystem::is_directory(path))
        {
            throw std::runtime_error("Fail Opening Directory");
        }

        std::vector<pid_t> pids;

        for(const auto& dir_entry : std::filesystem::directory_iterator(path))
        {
            if(dir_entry.is_directory())
            {
                auto dir_name = dir_entry.path().filename().string();

                if(std::all_of(dir_name.begin(), dir_name.end(), isdigit))
                {
                    pid_t pid = std::stoi(dir_name);
                    pids.emplace_back(pid);
                }
            }
        }

        return pids;
    }

    void openFile(const char* path, int flag)
    {
        if(_fd != -1)
        {
            close(_fd);
        }
        _fd = open(path, flag);

        if(_fd == -1)
        {
            throw std::runtime_error("Failed open memory file");
        }
    }

    void seek(uint64_t offset)
    {
        if(_fd != -1 && lseek(_fd, offset, SEEK_SET) == 0)
        {
            throw std::runtime_error("Error seeking address offset");
        }
    }

    int getFd()
    {
        return _fd;
    }
};

#endif //TESTPROJECT_FILEMANAGER_HPP
